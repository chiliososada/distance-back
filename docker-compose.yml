version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile.dev
    container_name: distance-back-dev
    ports:
      - "8081:8080"
    volumes:
      - .:/app
      - go-mod-cache:/go/pkg/mod
    environment:
      - GIN_MODE=debug
      - GO_ENV=development
    depends_on:
      mysql:
        condition: service_healthy # 添加健康检查依赖
      redis:
        condition: service_healthy
    networks:
      - distance-network
    restart: unless-stopped # 添加重启策略

  mysql:
    image: mysql:8.0
    container_name: distance-mysql
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root_password
      - MYSQL_DATABASE=distance_back
      - MYSQL_USER=distance_user
      - MYSQL_PASSWORD=distance_password
    volumes:
      - mysql-data:/var/lib/mysql
      - ./scripts/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - distance-network
    healthcheck:
      # 添加健康检查
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7.0-alpine
    container_name: distance-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - distance-network
    healthcheck:
      # 添加健康检查
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  go-mod-cache:
  mysql-data:
  redis-data:


networks:
  distance-network:
    driver: bridge
